{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport FacebookProvider from \"next-auth/providers/facebook\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n\nexport const authOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n    FacebookProvider({\n      clientId: process.env.FACEBOOK_CLIENT_ID || \"\",\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET || \"\",\n    }),\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        // This is a placeholder for demo purposes\n        // In a real app, you would validate against a database\n        if (credentials?.email === \"demo@ghalji.com\" && credentials?.password === \"demo123\") {\n          return {\n            id: \"1\",\n            name: \"Demo User\",\n            email: \"demo@ghalji.com\",\n          };\n        }\n        return null;\n      },\n    }),\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  pages: {\n    signIn: '/login',\n    signUp: '/signup',\n  },\n  callbacks: {\n    async jwt({ token, user }: any) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }: any) {\n      if (token) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;QACA,CAAA,GAAA,uJAAA,CAAA,UAAgB,AAAD,EAAE;YACf,UAAU,QAAQ,GAAG,CAAC,kBAAkB,IAAI;YAC5C,cAAc,QAAQ,GAAG,CAAC,sBAAsB,IAAI;QACtD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,0CAA0C;gBAC1C,uDAAuD;gBACvD,IAAI,aAAa,UAAU,qBAAqB,aAAa,aAAa,WAAW;oBACnF,OAAO;wBACL,IAAI;wBACJ,MAAM;wBACN,OAAO;oBACT;gBACF;gBACA,OAAO;YACT;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;QACR,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAO;YAC5B,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAO;YACnC,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}